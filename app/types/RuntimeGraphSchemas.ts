// Generated by ts-to-zod
import { z } from "zod";

// Base Types
export const baseNodeSchema = z.object({
  id: z.string(),
  labels: z.array(z.string()),
  properties: z.record(z.any()),
});

export const baseRelationshipSchema = z.object({
  id: z.string(),
  type: z.string(),
  start_node_id: z.string(),
  end_node_id: z.string(),
  properties: z.record(z.any()),
});

// Node Types
export const accountNodeSchema = baseNodeSchema.extend({
  labels: z.tuple([z.literal("Account")]),
  properties: z.object({
    id: z.string().optional(),
    username: z.string().optional(),
  }),
});

export const authorNodeSchema = baseNodeSchema.extend({
  labels: z.tuple([z.literal("Author")]),
  properties: z.object({
    id: z.string().optional(),
    name: z.string().optional(),
  }),
});

export const conceptNodeSchema = baseNodeSchema.extend({
  labels: z.tuple([z.literal("Concept")]),
  properties: z.object({
    id: z.string().optional(),
    weight: z.number().optional(),
    name: z.string().optional(),
    relevance: z.number().optional(),
    quality: z.number().optional(),
  }),
});

export const postNodeSchema = baseNodeSchema.extend({
  labels: z.tuple([z.literal("Post")]),
  properties: z.object({
    id: z.string().optional(),
    content: z.string().optional(),
    title: z.string().optional(),
    popularity: z.number().optional(),
  }),
});

export const entityNodeSchema = baseNodeSchema.extend({
  labels: z.tuple([z.literal("Entity")]),
  properties: z.object({
    id: z.string().optional(),
    name: z.string().optional(),
  }),
});

export const nodeSchema = z.union([
  accountNodeSchema,
  authorNodeSchema,
  conceptNodeSchema,
  postNodeSchema,
  entityNodeSchema,
]);

// Relationship Types
export const rETWEETEDRelationshipSchema = baseRelationshipSchema.extend({
  type: z.literal("RETWEETED"),
  properties: z.object({
    id: z.string().optional(),
  }),
});

export const rELATEDTORelationshipSchema = baseRelationshipSchema.extend({
  type: z.literal("RELATED_TO"),
  properties: z.object({
    id: z.string().optional(),
    weight: z.number().optional(),
  }),
});

export const aUTHOREDBYRelationshipSchema = baseRelationshipSchema.extend({
  type: z.literal("AUTHORED_BY"),
  properties: z.object({
    id: z.string().optional(),
  }),
});

export const hASCONCEPTRelationshipSchema = baseRelationshipSchema.extend({
  type: z.literal("HAS_CONCEPT"),
  properties: z.object({
    id: z.string().optional(),
  }),
});

export const dEPICTSRelationshipSchema = baseRelationshipSchema.extend({
  type: z.literal("DEPICTS"),
  properties: z.object({
    id: z.string().optional(),
  }),
});

export const mENTIONSRelationshipSchema = baseRelationshipSchema.extend({
  type: z.literal("MENTIONS"),
  properties: z.object({
    id: z.string().optional(),
  }),
});

export const rEPLIEDTORelationshipSchema = baseRelationshipSchema.extend({
  type: z.literal("REPLIED_TO"),
  properties: z.object({
    id: z.string().optional(),
  }),
});

export const sIMILARTONERelationshipSchema = baseRelationshipSchema.extend({
  type: z.literal("SIMILAR_TONE"),
  properties: z.object({
    id: z.string().optional(),
    similarity: z.number().optional(),
  }),
});

export const lIKESRelationshipSchema = baseRelationshipSchema.extend({
  type: z.literal("LIKES"),
  properties: z.object({
    id: z.string().optional(),
  }),
});

export const iNTERACTSWITHRelationshipSchema = baseRelationshipSchema.extend({
  type: z.literal("INTERACTS_WITH"),
  properties: z.object({
    id: z.string().optional(),
    weight: z.number().optional(),
  }),
});

export const relationshipSchema = z.union([
  rETWEETEDRelationshipSchema,
  rELATEDTORelationshipSchema,
  aUTHOREDBYRelationshipSchema,
  hASCONCEPTRelationshipSchema,
  dEPICTSRelationshipSchema,
  mENTIONSRelationshipSchema,
  rEPLIEDTORelationshipSchema,
  sIMILARTONERelationshipSchema,
  lIKESRelationshipSchema,
  iNTERACTSWITHRelationshipSchema,
]);
