// Generated by ts-to-zod
import { z } from "zod";

export const strategySchema = z.object({
  id: z.string(),
  strategy_name: z.string(),
  pathmap: z.record(z.string()),
  disallowed_successors: z.record(z.array(z.array(z.string()))),
});

// Strategy and Composition Types
export const protocolSchema = z.object({
  id: z.string(),
  strategy: strategySchema,
  input_type: z.string(),
  output_type: z.string(),
});

export const compositionSchema = z.object({
  id: z.string(),
  protocols: z.array(protocolSchema),
  nl_description: z.string(),
});

export const parameterizedCompositionSchema = z.object({
  id: z.string(),
  composition: compositionSchema,
  params: z.array(
    z.record(z.any()).and(
      z.object({
        limit: z.number().optional(),
      }),
    ),
  ),
  probability: z.number().nullable(),
});

export const rankingDistributionSchema = z.object({
  input_diversity: z.number(),
  protocol_diversity: z.number(),
  content_diversity: z.number(),
  input_preference: z.number(),
  strategy_preference: z.number(),
  content_quality: z.number(),
  timeliness: z.number(),
  content_distance: z.number(),
});

export const rankingScoresSchema = z.object({
  input_diversity: z.number(),
  protocol_diversity: z.number(),
  content_diversity: z.number(),
  input_preference: z.number(),
  strategy_preference: z.number(),
  content_quality: z.number(),
  timeliness: z.number(),
  content_distance: z.number(),
});

export const protocolDistributionSchema = z.record(z.number());

export const errorEventSchema = z.object({
  id: z.string(),
  event_type: z.literal("error"),
  message: z.string(),
  traceback: z.string().optional(),
});

export const connectionEventSchema = z.object({
  id: z.string(),
  event_type: z.literal("connection"),
  status: z.union([z.literal("connected"), z.literal("disconnected")]),
  timestamp: z.string(),
});

export const triggerEventSchema = z.object({
  id: z.string(),
  event_type: z.literal("trigger"),
  action: z.string(),
  timestamp: z.string(),
});

export const validationEventSchema = z.object({
  id: z.string(),
  event_type: z.literal("validation"),
  status: z.union([z.literal("success"), z.literal("failure")]),
  message: z.string(),
  details: z.record(z.any()),
});

const nodeSchema = z.any();

const relationshipSchema = z.any();

export const pathSchema = z.object({
  nodes: z.array(nodeSchema),
  relationships: z.array(relationshipSchema),
});

export const outputSchema = z.object({
  id: z.string(),
  node: nodeSchema,
  parameterized_compositions: z.array(parameterizedCompositionSchema),
  metadata: z.record(z.any()).and(
    z.object({
      path_count: z.number().optional(),
      avg_path_length: z.number().optional(),
    }),
  ),
  paths: z.record(z.array(pathSchema)),
});

export const rankedOutputSchema = z.object({
  id: z.string(),
  output: outputSchema,
  ranking_score: z.number(),
  ranking_distribution: rankingDistributionSchema,
  ranking_scores: rankingScoresSchema,
  protocol_distribution: protocolDistributionSchema,
});

// Event Types
export const nodeEventSchema = z.object({
  id: z.string(),
  event_type: z.union([z.literal("add"), z.literal("update")]),
  ranked_output: rankedOutputSchema,
  message: z.string().optional().nullable(),
});

export const eventSchema = z.union([
  nodeEventSchema,
  errorEventSchema,
  connectionEventSchema,
  triggerEventSchema,
  validationEventSchema,
]);
